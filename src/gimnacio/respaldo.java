/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gimnacio;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author liooficial
 */
public class respaldo extends javax.swing.JFrame {

    /**
     * Creates new form respaldo
     */
    public respaldo(String s,String h) {
        initComponents();
        jLabel2.setText(s);
        jLabel4.setText(fecha());
        jLabel3.setText(h);
        cargar_tabla2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void cargar_tabla2(){
        //tabla clientes
        DefaultTableModel clientes = (DefaultTableModel) jTable1.getModel(); 
        clientes.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        try{
            Connection con=Conexion.getConexion();
            ps=con.prepareStatement("SELECT *FROM entrenamientosRESPLADO ORDER BY intrucion ");
            rs=ps.executeQuery();
            rsmd=rs.getMetaData();
            columnas =rsmd.getColumnCount();
            while(rs.next()){
                Object[] fila= new Object[columnas];
                for(int indice=0;indice<columnas;indice++){
                    fila[indice]= rs.getObject(indice+1);
                }
                clientes.addRow(fila);
            }
        }catch(SQLException ex){
         JOptionPane.showMessageDialog(null, ex.toString());
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        jButton1.setBackground(new java.awt.Color(255, 255, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("restaurar datos de entrenamientos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Entrenamiento", "Horarios", "Equipamiento", "Tipo", "instrucion", "Fecha_modificacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel1.setText("entrenamientos");

        jButton2.setBackground(new java.awt.Color(255, 0, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("SALIR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Insertados", "Eliminados", "Modificados" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setText("consultar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(385, 385, 385)
                        .addComponent(jLabel1)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(jComboBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(397, 397, 397))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       ENTRENAMIENTOS ventana= new ENTRENAMIENTOS(jLabel2.getText(),jLabel3.getText());
       ventana.setVisible(true);
        this.setVisible(false); 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        entrenamientos
        int fila = jTable1.getSelectedRow();
        int id = Integer.parseInt(jTable1.getValueAt(fila, 0) + "");
        String entrenamiento = (String) jTable1.getValueAt(fila, 1);
        String horario = (String) jTable1.getValueAt(fila, 2);
        String equipamiento = (String) jTable1.getValueAt(fila, 3);
        String tipo = (String) jTable1.getValueAt(fila, 4);
        int id_T = Integer.parseInt(jTable1.getValueAt(fila, 5) + "");
        switch (tipo) 
        {
            case "M":       
                    try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("UPDATE entrenamientos SET entrenamiento=?, horario=?, equipamiemto=? WHERE id_e=? ");
                    ps.setString(1, entrenamiento);
                    ps.setString(2, horario);
                    ps.setString(3, equipamiento);
                   ps.setInt(4, id);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Registro modificado RESTAURADO", "Registro modificado RESTAURADO", JOptionPane.PLAIN_MESSAGE, new ImageIcon("src/incertar.png"));
                    cargar_tabla2();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
                break;
            case "B":
                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("set identity_insert  entrenamientos on; INSERT INTO entrenamientos (id_e ,entrenamiento ,horario,equipamiemto )VALUES(?,?,?,?)");
                    ps.setInt(1, id);
                    ps.setString(2, entrenamiento);
                    ps.setString(3, horario);
                    ps.setString(4, equipamiento);
                    ps.setInt(4, id_T);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Registro borrado RESTAURADO", "Registro modificado RESTAURADO", JOptionPane.PLAIN_MESSAGE, new ImageIcon("src/incertar.png"));
                    cargar_tabla2();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Registro ya existente ");
               }
                break;
            case "I":
                try {
                    Connection con = Conexion.getConexion();
                    PreparedStatement ps = con.prepareStatement("set identity_insert  entrenamientos on; INSERT INTO entrenamientos (id_e ,entrenamiento ,horario,equipamiemto )VALUES(?,?,?,?)");
                    ps.setInt(1, id);
                    ps.setString(2, entrenamiento);
                    ps.setString(3, horario);
                    ps.setString(4, equipamiento);
                    ps.setInt(4, id_T);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Registro modificado RESTAURADO", "Registro modificado RESTAURADO", JOptionPane.PLAIN_MESSAGE, new ImageIcon("src/incertar.png"));
                   cargar_tabla2();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Registro ya existente ");
                }
            break;
        }
        try {
            Connection con = Conexion.getConexion();
            PreparedStatement ps;
            ps = con.prepareStatement("set identity_insert  entrenamientos off");
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(respaldo.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
//         entrenamientos
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel clientes = (DefaultTableModel) jTable1.getModel(); 
        clientes.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;
        String tipo = (String)jComboBox1.getSelectedItem();
        String tipo1="";
        if(tipo.equals("Insertados")){
            tipo1="I";
        }
        if(tipo.equals("Modificados")){
            tipo1="M";
        }
        if(tipo.equals("Eliminados")){
            tipo1="B";
        }
        switch (tipo1) {
            case "M":
                try {
                    Connection con = Conexion.getConexion();
                    ps = con.prepareStatement("SELECT *FROM entrenamientosRESPLADO WHERE Tipo='M'  ");
                    rs = ps.executeQuery();
                    rsmd = rs.getMetaData();
                    columnas = rsmd.getColumnCount();
                    while (rs.next()) {
                        Object[] fila = new Object[columnas];
                        for (int indice = 0; indice < columnas; indice++) {
                            fila[indice] = rs.getObject(indice + 1);
                        }
                        clientes.addRow(fila);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
                break;
            case "B":
                try {
                    Connection con = Conexion.getConexion();
                    ps = con.prepareStatement("SELECT *FROM entrenamientosRESPLADO WHERE Tipo='B'");
                    rs = ps.executeQuery();
                    rsmd = rs.getMetaData();
                    columnas = rsmd.getColumnCount();
                    while (rs.next()) {
                        Object[] fila = new Object[columnas];
                        for (int indice = 0; indice < columnas; indice++) {
                            fila[indice] = rs.getObject(indice + 1);
                        }
                        clientes.addRow(fila);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
                break;
            case "I":
                try {
                    Connection con = Conexion.getConexion();
                    ps = con.prepareStatement("SELECT *FROM entrenamientosRESPLADO WHERE Tipo='I'  ");
                    rs = ps.executeQuery();
                    rsmd = rs.getMetaData();
                    columnas = rsmd.getColumnCount();
                    while (rs.next()) {
                        Object[] fila = new Object[columnas];
                        for (int indice = 0; indice < columnas; indice++) {
                            fila[indice] = rs.getObject(indice + 1);
                        }
                        clientes.addRow(fila);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.toString());
                }
                break;
        }
    }//GEN-LAST:event_jButton3ActionPerformed
private static String fecha(){
        LocalDate fecha =LocalDate.now();
        DateTimeFormatter fsalida=DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String s = fecha.format(fsalida);
        return s;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(respaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(respaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(respaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(respaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new respaldo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
